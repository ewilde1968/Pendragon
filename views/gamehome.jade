extends layout

block content
  - var turnOnMenu = game && game.families[0];
  - var skillDescriptionsA = ['Untrained', 'Neophyte', 'Journeyman', 'Skilled', 'Master', 'Mythic'];
  - var statDescriptionsA = ['Dead', 'Infirm', 'Feeble', 'Weak', 'Normal', 'Strong', 'Superlative', 'Mythic'];
  - var honorDescriptionsA = ['Vile', 'Ignominious', 'Dishonorable', 'Churlish', 'Noble', 'Honorable', 'Peerage', 'Illustrious', 'Regal'];

  if turnOnMenu
    script.
      var changesObj = new Object(),
          skillDescA = ['Untrained', 'Neophyte', 'Journeyman', 'Skilled', 'Master', 'Mythic'],
          statDescA = ['Dead', 'Infirm', 'Feeble', 'Weak', 'Normal', 'Strong', 'Superlative', 'Mythic'],
          honorDescA = ['Vile', 'Ignominious', 'Dishonorable', 'Churlish', 'Noble', 'Honorable', 'Peerage', 'Illustrious', 'Regal'];

  #sidebar
    if turnOnMenu
      img.gameimage(src="/images/#{game.families[0].name}image.jpg")
    else
      img.gameimage(src="/images/pendragonimage.jpg")
    if turnOnMenu
      #turnCounter
        p #{game.turn.quarter} #{game.turn.year}
        button End Turn
      ul
        li
          button#expendituresMenu
            p Expenditures
        li
          button#charactersMenu
            p Characters
        li
          button#mapMenu
            p Map
        li
          button#courtMenu
            p Court
        li
          button#historyMenu
            p History
        li
          button#settingsMenu
            p Settings

  formUrl = '/user/' + accountId + '/game/' + gameId
  form#content( action=formUrl, method="POST")
    if turnOnMenu
      #resources
        p calculating...
        #resourcesProgress
          div
        p#remainingResources calculating...
      .notShown
        input#changes(type='text', name='changes', value='')
      #expendituresPage
        label(for='livingStyle') Living Style
        select(name='livingStyle', id='livingStyle')
          option(value='Poor') Poor
          option(value='Normal', selected='true') Normal
          option(value='Rich') Rich
          option(value='Opulent') Opulent
        #clothing
          label(for='clothing') Clothing and Accoutrements
          input(type='range', name='clothing', max=6, value=0)
          p 0£
        #holdings.horizontalList
          each holding in game.families[0].holdings
            .holdingSummary
              button.holdingDetailButton(data-id='#{holding.id}', class='#{holding.id}')
                p.holdingName #{holding.name}
                p.holdingIncome Income: #{holding.income}£
                p.holdingCost Cost: #{holding.cost}£
      #charactersPage(class='notShown')
        #characters
          each member in game.families[0].members
            button.memberDetailButton(data-id='#{member.id}')
              p #{member.name}
              p #{member.profession}
      #mapPage(class='notShown')
      #courtPage(class='notShown')
        if game.turn.quarter == 'Winter'
          p No Winter Court
        if game.turn.quarter == 'Spring'
          p Pentacost Court
        if game.turn.quarter == 'Summer'
          p No Summer Court
        if game.turn.quarter == 'Fall'
          p Christmas Court
      #historyPage(class='notShown')
      each member in game.families[0].members
        .memberDetailPage(class='notShown', id='#{member.id}', name='#{member.id}')
          p.memberName #{member.name}
          p.memberProfession #{member.profession}
          p.memberAge #{member.age} years old
          .health
            span.statLabel Health: 
            span.statValue(data-value='#{member.health}') #{statDescriptionsA[member.health]}
          .body
            span.statLabel Body: 
            span.statValue(data-value='#{member.body}') #{statDescriptionsA[member.body]}
          .mind
            span.statLabel Mind: 
            span.statValue(data-value='#{member.mind}') #{statDescriptionsA[member.mind]}
          .soul
            span.statLabel Soul: 
            span.statValue(data-value='#{member.soul}') #{statDescriptionsA[member.soul]}
          .honor
            span.statLabel Honor: 
            span.statValue(data-value='#{member.honor}') #{honorDescriptionsA[member.honor]}
          .skills
            each skill in member.skills
              .skill
                p #{skill.name}: #{skillDescriptionsA[skill.level]}
          .equipment
            if member.armor && member.armor.length > 0
              if member.shield
                p.armor #{member.armor} and Shield
              else
                p.armor #{member.armor}
            button Equip
      each holding in game.families[0].holdings
        .holdingDetailPage(class='notShown', id='#{holding.id}', data-income='#{holding.income}', data-cost='#{holding.cost}')
          p.holdingName #{holding.name}
          .holdingSteward
            p Steward
            button.memberDetailButton(data-id='#{holding.steward}')
              each member in game.families[0].members
                if member.id == holding.steward
                  p #{member.name}
                  - var foundStewardSkill = null;
                  each skill in member.skills
                    if skill.name === 'Stewardry'
                      - foundStewardSkill = skill;
                  if foundStewardSkill
                    p Stewardry: #{skillDescriptionsA[foundStewardSkill.level]}
                  else
                    p Stewardry: Untrained
            button.changeSteward Change Steward
          .investments
            - var sum = 0, costSum = holding.cost;
            each investment in holding.investments
              - var c = investment.built ? 'built' : 'notbuilt' + investment.damaged ? 'damaged' : '';
              - sum += investment.income;
              - costSum += investment.cost;
              p(class=c) #{investment.name}
            p.investmentIncome(data-sum='#{sum}') Investment Income: #{sum}£
            button.makeInvestment Make Investment
          p.holdingCost(data-sum='#{costSum}') Cost to run estate: #{costSum}
          .taxLevel
            label(for='taxLevel') Taxes
            input(type='range', name='taxLevel', max=12, value=6)
            p 6£
          .population
            p.noncombatants Noncombatants #{holding.population.noncombatants}
            p.militia Militia #{holding.population.militia}
            if holding.population.archers
              p.archers Archers #{holding.population.archers}
            if holding.population.karls
              p.karls Karls #{holding.population.karls}
            button.trainPopulation Train
          .festival
            select(name='festival', id='festival')
              option(value='Fair') Fair
              option(value='Horse Race') Horse Race
              option(value='Tournament') Tournament
            button.holdFestival Hold Festival
    #settingsPage(class='notShown')
      a(href='/') Logout
      newGameURL = '/user/' + accountId + '/game/new'
      a(href=newGameURL) New Game
      .multilist
        ul.listgroup
  if events
    each ev in events.shown
      .eventDetailPage(class='notShown', id='#{ev.id}')
        p #{ev.title}
        p #{ev.message}
        each o in ev.results
          if o.action
            button.eventDetailOption(data-action='#{o.action}', data-key='#{o.key}', data-value='#{o.value}') #{o.label}
    each ev in events.subEvents
      .subEventDetailPage(class='notShown', id='#{ev.id}')
        p #{ev.title}
        p #{ev.message}
        each o in ev.results
          button.eventDetailOption(data-action='#{o.action}', data-key='#{o.key}', data-value='#{o.value}') #{o.label}

  if turnOnMenu
    script.
      $(document).ready(function () {
        // menu
        var pageShown = '#expendituresPage';
        var showPage = function (pageToShow) {
            if (pageShown != pageToShow) {
                $(pageShown).addClass('notShown');
                pageShown = pageToShow;
                $(pageShown).removeClass('notShown');
            }
        };
        $('#expendituresMenu').click(function () {showPage('#expendituresPage'); });
        $('#charactersMenu').click(function () {showPage('#charactersPage'); });
        $('#mapMenu').click(function () {showPage('#mapPage'); });
        $('#courtMenu').click(function () {showPage('#courtPage'); });
        $('#historyMenu').click(function () {showPage('#historyPage'); });
        $('#settingsMenu').click(function () {showPage('#settingsPage'); });
        $('#turnCounter button').click(function () {
            $('#changes').val( JSON.stringify(changesObj));
            $('#content').submit();
        });

        //resources area
        var calculateSpent = function () {
            var spent = parseInt($('#clothing input').val(), 10);
            switch ($('#livingStyle').val()) {
            case 'Poor':
                spent += 1;
                break;
            case 'Rich':
                spent += 8;
                break;
            case 'Opulent':
                spent += 12;
                break;
            case 'Normal':
            default:
                spent += 4;
                break;
            }
            $('.holdingDetailPage').each(function () {spent+=$(this).data('cost'); });
            return spent;
        };
        var calculateIncome = function () {
            var result = #{game.families[0].cash};
            $('.holdingDetailPage').each( function () {result+=$(this).data('income'); });
            $('#resources p').text('Resources ' + result + '£');
            $('#clothing input').attr('max', result);
            return result;
        };
        var calculateResources = function () {
            var spent = calculateSpent(),
                have = calculateIncome(),
                progress = $('#resourcesProgress div');
            if (spent > have) {
                progress.addClass('inDebt');
                $('#remainingResources').text('-' + (spent - have) + '£');
            } else {
                progress.removeClass('inDebt');
                $('#remainingResources').text((have - spent) + '£');
            }
            var val = Math.floor(Math.abs(have - spent) * 100 / 12);
            if (val > 100) val = 100;
            progress.css('width', Math.floor(Math.abs(val)) + '%');
        };
        calculateResources();

        //expendituresPage
        $('.holdingDetailButton').click(function (ev) {
            ev.preventDefault();
            showPage( '#' + $(this).data('id'));
        });
        $('#clothing input').change(function () {
            $('#clothing p').text($(this).val() + '£');
            calculateResources();
        });
        $('#livingStyle').change(function () {calculateResources(); });
        if ('#{game.turn.quarter}' != 'Winter') {
            $('#livingStyle').attr('disabled', true);
            $('#clothing input').attr('disabled', true);
        }

        //charactersPage
        $('.memberDetailButton').click(function (ev) {
            ev.preventDefault();
            showPage( '#' + $(this).data('id'));
        });
        $('.equipment button').click(function (ev) {
            ev.preventDefault();
        });
        
        //mapPage
        //courtPage
        //historyPage
        //settingsPage

        //eventDetailPage
        var eventShown = null;
        var showEvent = function (eventToShow) {
            if (eventShown != eventToShow) {
                if( eventShown)
                    $(eventShown).addClass('notShown');
                eventShown = eventToShow;
                if( eventShown)
                    $(eventShown).removeClass('notShown');
            }
        };          
        var nextEvent = function () {
            var evs = $('.eventDetailPage');
            if (evs && evs.length > 0) {
                showEvent('#' + evs[0].id);
                $('#sidebar button').attr('disabled', true);
            } else {
                showEvent(null);
                $('#sidebar button').removeAttr('disabled');
            }
        };
        $('.eventDetailOption').click(function (ev) {
            ev.preventDefault();
            $(this).parent().remove();
            switch ($(this).data('action')) {
            case 'next':
                showEvent('#' + $(this).data('value'));
                break;
            case 'experience':
                var cObj = changesObj['#{game.families[0].members[0].id}'] || new Object(),
                    expObj = cObj['experience'] || new Array(),
                    key = $(this).data('key');
                if (expObj.indexOf(key) == -1) {expObj.push(key); }
                cObj['experience'] = expObj;
                changesObj['#{game.families[0].members[0].id}'] = cObj;
                nextEvent();
                break;
            case 'statChange':
                var key = $(this).data('key'),
                    spanE = $('#' + '#{game.families[0].members[0].id} .' + key + ' .statValue'),
                    val = spanE.data('value'),
                    cObj = changesObj['#{game.families[0].members[0].id}'] || new Object();
                val += $(this).data('value');
                if (val < 0) {val = 0; }
                if (key === 'honor') {
                    if (val >= #{honorDescriptionsA.length}) {val = #{honorDescriptionsA.length} - 1; }
                    spanE.text(honorDescA[val]);
                } else {
                    if (val >= #{statDescriptionsA.length}) {val = #{statDescriptionsA.length} - 1; }
                    spanE.text(statDescA[val]);
                }
                spanE.data('value', val);
                cObj[key] = val;
                changesObj['#{game.families[0].members[0].id}'] = cObj;
                nextEvent();
                break;
            case 'log':
            default:
                nextEvent();
                break;
            }
        });
        nextEvent();
        
        // holdingDetailPage
        $('.changeSteward').click(function (ev) {
            ev.preventDefault();
        });
        $('.makeInvestment').click(function (ev) {
            ev.preventDefault();
        });
        $('.trainPopulation').click(function (ev) {
            ev.preventDefault();
        });
        $('.holdFestival').click(function (ev) {
            ev.preventDefault();
        });
        $('.taxLevel input').change(function (ev) {
            var pg = $(this).parent().parent(),
                id = pg.attr('id'),
                ii = parseInt($('#' + id + ' .investmentIncome').data('sum'), 10),
                val = parseInt($(this).val(), 10),
                total = val + ii,
                hObj = changesObj[id] || new Object();
            $('.taxLevel p').text(val + '£');
            $('.' + id + ' .holdingIncome').text( 'Income: ' + total + '£');
            pg.data('income',total);
            hObj.tax = val;
            changesObj[id] = hObj;
            calculateResources();
        });
      });
  else
    script.
      $(document).ready(function () {
          $('#settingsPage').removeClass('notShown');
      });
extends layout

block content
  - var turnOnMenu = game && game.families[0];
  - var skillDescriptionsA = ['Untrained', 'Neophyte', 'Journeyman', 'Skilled', 'Master', 'Mythic'];
  - var statDescriptionsA = ['Dead', 'Infirm', 'Feeble', 'Weak', 'Normal', 'Strong', 'Superlative', 'Mythic'];
  - var honorDescriptionsA = ['Vile', 'Ignominious', 'Dishonorable', 'Churlish', 'Noble', 'Honorable', 'Peerage', 'Illustrious', 'Regal'];
  mixin addSubeventDiv(se)
    .subEventDetailPage(class='notShown', data-action='#{se.actions}', id='#{se.id}')
      p #{se.title}
      p #{se.message}
      each o in se.choices
        button.eventDetailOption(data-id='#{o.id}') #{o.label}
    each o in se.choices
      mixin addSubeventDiv(o)

  if turnOnMenu
    script.
      var changesObj = new Object(),
          cash = #{game.families[0].cash};
      const skillDescA = ['Untrained', 'Neophyte', 'Journeyman', 'Skilled', 'Master', 'Mythic'],
          statDescA = ['Dead', 'Infirm', 'Feeble', 'Weak', 'Normal', 'Strong', 'Superlative', 'Mythic'],
          honorDescA = ['Vile', 'Ignominious', 'Dishonorable', 'Churlish', 'Noble', 'Honorable', 'Peerage', 'Illustrious', 'Regal'];

  #sidebar
    if turnOnMenu
      img.gameimage(src="/images/#{game.families[0].name}image.jpg")
    else
      img.gameimage(src="/images/pendragonimage.jpg")
    if turnOnMenu
      #turnCounter
        p #{game.turn.quarter} #{game.turn.year}
        button End Turn
      ul
        li
          button#expendituresMenu
            p Expenditures
        li
          button#charactersMenu
            p Characters
        li
          button#mapMenu
            p Map
        li
          button#courtMenu
            p Court
        li
          button#historyMenu
            p History
        li
          button#settingsMenu
            p Settings

  #content
    if turnOnMenu
      #resources
        p calculating...
        #resourcesProgress
          div
        p#remainingResources calculating...
      formUrl = '/user/' + accountId + '/game/' + gameId
      form.notShown( action=formUrl, method="POST")
        input#changes(type='text', name='changes', value='')
      #expendituresPage
        label(for='livingStyle') Living Style
        select(name='livingStyle', id='livingStyle')
          option(value='Poor') Poor
          option(value='Normal', selected='true') Normal
          option(value='Rich') Rich
          option(value='Opulent') Opulent
        #generosity
          label(for='generosity') Generosity
          input(type='range', name='generosity', max='#{game.families[0].cash', value='#{game.families[0].generosity}')
          p #{game.families[0].generosity}£
        #holdings.horizontalList
          each holding in game.families[0].holdings
            .holdingSummary
              button.holdingDetailButton(data-id='#{holding.id}', class='#{holding.id}')
                p.holdingName #{holding.name}
                p.holdingIncome Income: #{holding.income}£
                p.holdingCost Cost: #{holding.cost}£
      #charactersPage(class='notShown')
        #characters
          each member in game.families[0].members
            button.memberDetailButton(data-id='#{member.id}')
              p #{member.name}
              p #{member.profession}
      #mapPage(class='notShown')
      #courtPage(class='notShown')
        if game.turn.quarter === 'Winter'
          p No Winter Court
        if game.turn.quarter === 'Spring'
          p Pentacost Court
        if game.turn.quarter === 'Summer'
          p No Summer Court
        if game.turn.quarter === 'Fall'
          p Christmas Court
      #historyPage(class='notShown')
      each member in game.families[0].members
        .memberDetailPage(class='notShown', id='#{member.id}', name='#{member.id}')
          p.memberName #{member.name}
          p.memberProfession #{member.profession}
          .statsView
            p.memberAge #{member.age} years old
            .health
              span.statLabel Health: 
              span.statValue(data-value='#{member.health}') #{statDescriptionsA[member.health]}
            .body
              span.statLabel Body: 
              span.statValue(data-value='#{member.body}') #{statDescriptionsA[member.body]}
            .mind
              span.statLabel Mind: 
              span.statValue(data-value='#{member.mind}') #{statDescriptionsA[member.mind]}
            .soul
              span.statLabel Soul: 
              span.statValue(data-value='#{member.soul}') #{statDescriptionsA[member.soul]}
            .honor
              span.statLabel Honor: 
              span.statValue(data-value='#{member.honor}') #{honorDescriptionsA[member.honor]}
            .skills
              each skill in member.skills
                .skill
                  p #{skill.name}: #{skillDescriptionsA[skill.level]}
            .equipment
              if member.armor && member.armor.length > 0
                if member.shield
                  p.armor #{member.armor} and Shield
                else
                  p.armor #{member.armor}
      each holding in game.families[0].holdings
        .holdingDetailPage(class='notShown', id='#{holding.id}', data-income='#{holding.income}')
          .statsView
            p.holdingName #{holding.name}
            .holdingSteward
              p Steward
              button.memberDetailButton(data-id='#{holding.steward}')
                each member in game.families[0].members
                  if member.id == holding.steward
                    p #{member.name}
                    - var foundStewardSkill = null;
                    each skill in member.skills
                      if skill.name === 'Stewardry'
                        - foundStewardSkill = skill;
                    if foundStewardSkill
                      p Stewardry: #{skillDescriptionsA[foundStewardSkill.level]}
                    else
                      p Stewardry: Untrained
              button.changeSteward Change Steward
            .investments
              - var sum = 0, costSum = holding.cost;
              each investment in holding.investments
                - var c = investment.built ? 'built' : 'notbuilt' + investment.damaged ? 'damaged' : '';
                - sum += investment.income;
                - costSum += investment.maintenance;
                p(class=c) #{investment.name}
              p.investmentIncome(data-sum='#{sum}') Investment Income: #{sum}£
              button.makeInvestment Make Investment
            p.holdingCost(data-sum='#{costSum}') Cost to run estate: #{costSum}£
            .taxLevel
              label(for='taxLevel') Taxes
              input(type='range', name='taxLevel', max=12, value=6)
              p 6£
            .population
              p.noncombatants Noncombatants #{holding.population.noncombatants}
              p.militia Militia #{holding.population.militia}
              if holding.population.archers
                p.archers Archers #{holding.population.archers}
              if holding.population.karls
                p.karls Karls #{holding.population.karls}
              button.trainPopulation Train
            .festival
              button.holdFestival Hold Festival
          .buildView(class='notShown')
            each investment in holding.allowedInvests
              input(type='radio', name='#{holding.id}build', value='#{investment.name}', data-cost='#{investment.cost}')
              label(for='#{holding.id}build') #{investment.name}
            button.cancel Don't Build
            button.build Build
          .trainView(class='notShown')
            p How much do you spend training?
            - var militiaTrainMax = (holding.population.noncombatants/5 - holding.population.militia - holding.population.archers) > 0 ? 2 : 0;
            - var archerTrainMax = Math.floor(holding.population.militia / 3);
            - var karlTrainMax = Math.floor(holding.population.noncombatants / 50) - holding.population.karls;
            .militiaTraining
              label(for='#{holding.id}trainMilitia') Militia (#{holding.population.militia})
              input(type='range', name='#{holding.id}trainMilitia', value='0', max='#{militiaTrainMax}', data-cost='0')
              p(id='#{holding.id}trainMilitia') 0£
            .archerTraining
              label(for='#{holding.id}trainArchers') Archers (#{holding.population.archers})
              input(type='range', name='#{holding.id}trainArchers', value='0', max='#{archerTrainMax}', data-cost='0')
              p(id='#{holding.id}trainArchers') 0£
            .karlTraining
              label(for='#{holding.id}trainKarls') Karls (#{holding.population.karls})
              input(type='range', name='#{holding.id}trainKarls', value='0', max='#{karlTrainMax}', data-cost='0')
              p(id='#{holding.id}trainKarls') 0£
            button OK
          .festivalView(class='notShown')
            each festival in holding.allowedFeasts
              input(type='radio', name='#{holding.id}festival', value='#{festival.name}', data-cost='#{festival.cost}')
              label(for='#{holding.id}festival') #{festival.name}
            button.cancel Cancel
            button.festival Festival
    #settingsPage(class='notShown')
      a(href='/') Logout
      newGameURL = '/user/' + accountId + '/game/new'
      a(href=newGameURL) New Game
      .multilist
        ul.listgroup
  if events
    each ev in events
      .eventDetailPage(class='notShown', data-action='#{ev.actions}', id='#{ev.id}')
        p #{ev.title}
        p #{ev.message}
        each o in ev.choices
          button.eventDetailOption(data-id='#{o.id}') #{o.label}
      each e in ev.choices
        mixin addSubeventDiv(e)
  if turnOnMenu
    script.
      $(document).ready(function () {
        // *******************************************
        // menu
        // *******************************************
        var pageShown = '#expendituresPage';
        var showPage = function (pageToShow) {
            if (pageShown !== pageToShow) {
                $(pageShown).addClass('notShown');
                pageShown = pageToShow;
                $(pageShown).removeClass('notShown');
            }
        };
        
        $('#expendituresMenu').click(function () {showPage('#expendituresPage'); });
        $('#charactersMenu').click(function () {showPage('#charactersPage'); });
        $('#mapMenu').click(function () {showPage('#mapPage'); });
        $('#courtMenu').click(function () {showPage('#courtPage'); });
        $('#historyMenu').click(function () {showPage('#historyPage'); });
        $('#settingsMenu').click(function () {showPage('#settingsPage'); });

        $('#turnCounter button').click(function () {
            changesObj.turn = {year: #{game.turn.year}, quarter: '#{game.turn.quarter}'};
            $('#changes').val( JSON.stringify(changesObj));
            $('form').submit();
        });


        // *******************************************
        // resources area
        // *******************************************
        var calculateSpent = function () {
            var spent = parseInt($('#generosity input').val(), 10);

            switch ($('#livingStyle').val()) {
            case 'Poor':
                spent += 1;
                break;
            case 'Rich':
                spent += 8;
                break;
            case 'Opulent':
                spent += 12;
                break;
            case 'Normal':
            default:
                spent += 4;
                break;
            }

            $('.holdingDetailPage .holdingCost').each(function () {spent+=$(this).data('sum'); });

            return spent;
        };

        var calculateIncome = function () {
            var result = cash;
            $('.holdingDetailPage').each( function () {result+=$(this).data('income'); });
            $('#resources p').text('Resources ' + result + '£');
            $('#generosity input').attr('max', result);
            return result;
        };

        var calculateResources = function () {
            var spent = calculateSpent(),
                have = calculateIncome(),
                progress = $('#resourcesProgress div');

            if (spent > have) {
                progress.addClass('inDebt');
                $('#remainingResources').text('-' + (spent - have) + '£');
            } else {
                progress.removeClass('inDebt');
                $('#remainingResources').text((have - spent) + '£');
            }

            var val = Math.floor(Math.abs(have - spent) * 100 / 12);
            if (val > 100) val = 100;
            progress.css('width', Math.floor(Math.abs(val)) + '%');
        };


        // *******************************************
        // expendituresPage
        // *******************************************
        $('.holdingDetailButton').click(function (ev) {
            ev.preventDefault();
            showPage( '#' + $(this).data('id'));
        });

        $('#generosity input').change(function () {
            var val = $(this).val();

            $('#generosity p').text(val + '£');
            changesObj['generosity'] = val;

            calculateResources();
        });

        $('#livingStyle').change(function () {
            changesObj['livingStyle'] = $('#livingStyle option:selected').val();

            calculateResources();
        });


        // *******************************************
        // charactersPage
        // *******************************************
        $('.memberDetailButton').click(function (ev) {
            ev.preventDefault();
            showPage( '#' + $(this).data('id'));
        });

        $('.equipment button').click(function (ev) {
            ev.preventDefault();
        });
        
        //mapPage
        //courtPage
        //historyPage
        //settingsPage

        // *******************************************
        // characterDetailPage
        // *******************************************
        var changeStat = function (stat, changeVal) {
            var spanE = $('#' + '#{game.families[0].members[0].id} .' + stat + ' .statValue'),
                val = spanE.data('value') + changeVal,
                cObj = changesObj['#{game.families[0].members[0].id}'] || new Object(),
                descs = (stat === 'honor') ? honorDescA : statDescA;

            if (val < 0) {val = 0; }

            if (val >= descs.length) {val = descs.length - 1; }
            spanE.text(descs[val]);
            spanE.data('value', val);

            cObj[stat] = val;
            changesObj['#{game.families[0].members[0].id}'] = cObj;
        };
        

        // *******************************************
        // eventDetailPage
        // *******************************************
        var performAction = function (ev) {
            var action = ev.data('action');
            if (action && action !== 'undefined') {
                for (prop in action) {
                    if (action.hasOwnProperty(prop)) {
                        switch (prop) {
                            case 'experience':
                                var cObj = changesObj['#{game.families[0].members[0].id}'] || new Object(),
                                    expObj = cObj['experience'] || new Array();

                                if (expObj.indexOf(action[prop]) === -1) {expObj.push(action[prop]); }

                                cObj['experience'] = expObj;
                                changesObj['#{game.families[0].members[0].id}'] = cObj;
                                break;
                            case 'honor':
                                changeStat( prop, action[prop]);
                                break;
                            case 'cash':
                                var cObj = changesObj['cash'] || new Object();

                                cash += action[prop];

                                cObj = cash;
                                changesObj.cash = cash;
                                break;
                            case 'log':
                            default:
                                break;
                        }
                    }
                }
            }
        };

        var eventShown = null;
        var showEvent = function (eventToShow) {
            if (eventShown !== eventToShow) {
                if( eventShown) {
                    $(eventShown).addClass('notShown');
                }
                eventShown = eventToShow;
                if (eventShown) {
                    $(eventShown).removeClass('notShown');
                    performAction($(eventShown));
                }
            }
        };          

        var nextEvent = function () {
            var evs = $('.eventDetailPage');
            if (evs && evs.length > 0) {
                showEvent($('#' + evs[0].id))
                $('#sidebar button').attr('disabled', true);
            } else {
                calculateResources();
                showEvent(null);
                $('#sidebar button').removeAttr('disabled');
            }
        };

        $('.eventDetailOption').click(function (ev) {
            var dataId = $(this).data('id'),
                subevent = $('#' + dataId),
                subbuttons = $('#' + dataId + ' button');
            
            ev.preventDefault();
            $(this).parent().remove();
            
            if (subevent && subevent.length === 1 && subbuttons && subbuttons.length > 0) {
                showEvent(subevent);
            } else {
                nextEvent();
            }
        });


        // *******************************************
        // holdingDetailPage
        // *******************************************
        $('.changeSteward').click(function (ev) {
            ev.preventDefault();    // TODO
        });

        var setHoldingView = function(t, toShow) {
            var pg = t.parent().parent(),
                id = pg.attr('id');

            $('#' + id + ' .statsView').addClass('notShown');
            $('#' + id + ' .buildView').addClass('notShown');
            $('#' + id + ' .trainView').addClass('notShown');
            $('#' + id + ' .festivalView').addClass('notShown');

            $('#' + id + ' ' + toShow).removeClass('notShown');

            return id;
        };

        var setBuildSelection = function(id, make) {
            var hObj = changesObj[id] || new Object(),
                ce = $('#' + id + ' .holdingCost'),
                selItem = $('#' + id + ' .buildView input:checked'),
                cost = ce.data('sum');
            
            if (hObj.build) {
                cost -= hObj.build.cost;
            }

            if (make) {
                hObj.build = {cost: selItem.data('cost'), name: selItem.val()};
                changesObj[id] = hObj;
                cost += hObj.build.cost;
            } else {
                delete hObj.build;
            }

            ce.data('sum', cost).text('Cost to run estate: ' + cost + '£');
            $('.' + id + ' .holdingCost').text( 'Cost: ' + cost + '£');

            calculateResources();
        };

        var setFestivalSelection = function(id, make) {
            var hObj = changesObj[id] || new Object(),
                ce = $('#' + id + ' .holdingCost'),
                selItem = $('#' + id + ' .festivalView input:checked'),
                cost = ce.data('sum');
            
            if (hObj.festival) {
                cost -= hObj.festival.cost;
            }

            if (make) {
                hObj.festival = {cost: selItem.data('cost'), name: selItem.val()};
                changesObj[id] = hObj;
                cost += hObj.festival.cost;
            } else {
                delete hObj.festival;
            }

            ce.data('sum', cost).text('Cost to run estate: ' + cost + '£');
            $('.' + id + ' .holdingCost').text( 'Cost: ' + cost + '£');

            calculateResources();
        };

        $('.makeInvestment').click(function (ev) {
            ev.preventDefault();
            setHoldingView($(this).parent(), '.buildView');
        });

        $('.buildView .cancel').click(function (ev) {
            ev.preventDefault();
            setBuildSelection(setHoldingView($(this), '.statsView'), false);
        });

        $('.buildView .build').click(function (ev) {
            ev.preventDefault();
            setBuildSelection(setHoldingView($(this), '.statsView'), true);
        });

        $('.trainPopulation').click(function (ev) {
            ev.preventDefault();
            setHoldingView($(this).parent(), '.trainView');
        });
        
        $('.trainView button').click(function (ev) {
            ev.preventDefault();
            setHoldingView($(this), '.statsView')
        });

        $('.holdFestival').click(function (ev) {
            ev.preventDefault();
            setHoldingView($(this).parent(), '.festivalView');
        });
        
        $('.festivalView .festival').click(function (ev) {
            ev.preventDefault();
            setFestivalSelection(setHoldingView($(this), '.statsView'), true);
        });
        
        $('.festivalView .cancel').click(function (ev) {
            ev.preventDefault();
            setFestivalSelection(setHoldingView($(this), '.statsView'), false);
        });

        $('.taxLevel input').change(function (ev) {
            var pg = $(this).parent().parent().parent(),
                id = pg.attr('id'),
                ii = parseInt($('#' + id + ' .investmentIncome').data('sum'), 10),
                val = parseInt($(this).val(), 10),
                total = val + ii,
                hObj = changesObj[id] || new Object();

            $('.taxLevel p').text(val + '£');
            $('.' + id + ' .holdingIncome').text( 'Income: ' + total + '£');
            pg.data('income',total);

            hObj.tax = val;
            changesObj[id] = hObj;

            calculateResources();
        });

        $('.trainView input').change(function (ev) {
            var pg = $(this).parent().parent().parent(),
                id = pg.attr('id'),
                hObj = changesObj[id] || new Object(),
                pm = $('#' + id + 'trainMilitia'),
                pa = $('#' + id + 'trainArchers'),
                pk = $('#' + id + 'trainKarls'),
                im = $('input[name=' + id + 'trainMilitia' + ']'),
                ia = $('input[name=' + id + 'trainArchers' + ']'),
                ik = $('input[name=' + id + 'trainKarls' + ']'),
                ce = $('#' + id + ' .holdingCost'),
                cost = ce.data('sum');
            
            if (hObj.train) {
                cost = cost - hObj.train.militia - hObj.train.archers - hObj.train.karls;
            }

            hObj.train = {militia: im.val(), archers: ia.val(), karls: ik.val()};
            changesObj[id] = hObj;
            cost += parseInt(hObj.train.militia, 10) + parseInt(hObj.train.archers, 10) + parseInt(hObj.train.karls, 10);

            pm.text(im.val() + '£');
            pa.text(ia.val() + '£');
            pk.text(ik.val() + '£');
            ce.data('sum', cost).text('Cost to run estate: ' + cost + '£');
            $('.' + id + ' .holdingCost').text( 'Cost: ' + cost + '£');

            calculateResources();
        });

        // *******************************************
        // initial setup
        // *******************************************
        calculateResources();
        if ('#{game.turn.quarter}' !== 'Winter') {
            $('#livingStyle').attr('disabled', true);
            $('#generosity input').attr('disabled', true);
            $('.makeInvestment').attr('disabled', true);
            $('.trainPopulation').attr('disabled', true);
            $('.taxLevel input').attr('disabled', true);
            $('.changeSteward').attr('disabled', true);
            $('.holdFestival').attr('disabled', true);
        }
        nextEvent();
      });
  else
    script.
      $(document).ready(function () {
          $('#settingsPage').removeClass('notShown');
      });